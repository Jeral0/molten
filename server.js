require("dotenv").config();
const express = require("express");
const cors = require("cors");
const rateLimit = require("express-rate-limit");

const app = express();
const PORT = 3000;

const VALID_PASSWORDS = [
"644-160-792-581-452-354-740-169-645-247",
"243-181-580-213-114-900-291-463-105-533",
"956-387-349-168-475-986-889-696-867-883",
"780-391-624-705-117-117-590-295-956-504",
"814-285-541-985-991-448-841-399-464-147",
"881-750-272-165-700-574-690-727-470-737",
"967-653-615-251-312-437-535-759-674-351",
"174-251-860-443-347-780-255-946-376-396",
"341-814-183-115-596-756-634-206-259-631",
"417-473-279-925-984-575-598-981-450-183",
"517-960-724-816-778-170-649-965-855-730",
"782-887-899-738-667-762-707-309-416-451",
"938-409-284-359-235-616-745-164-172-860",
"252-782-618-635-778-205-929-191-374-913",
"376-441-990-723-950-770-107-429-584-354",
"805-612-516-372-680-930-798-701-742-215",
"108-605-484-359-422-730-802-420-698-678",
"256-684-550-821-363-761-277-678-544-860",
"463-217-796-113-683-872-664-292-266-371",
"977-352-515-167-880-551-283-329-977-511",
"664-189-621-726-175-223-833-984-426-166",
"717-197-202-171-998-376-306-151-512-148",
"340-380-346-648-427-735-945-807-406-269",
"640-368-256-270-655-710-189-561-118-797",
"811-105-178-476-729-539-451-114-282-744",
"849-566-262-433-337-124-623-376-721-587",
"620-679-494-414-720-534-304-680-105-898",
"755-907-529-824-965-811-209-643-888-736",
"141-682-450-580-218-659-788-483-895-711",
"239-110-222-969-894-781-494-918-278-317",
"307-989-511-374-106-992-556-169-600-330",
"195-822-374-208-186-972-944-523-587-350",
"585-262-930-310-535-376-917-983-708-129",
"834-828-648-696-704-726-247-559-121-329",
"638-957-775-985-847-393-614-358-553-808",
"985-259-191-307-933-947-442-836-877-589",
"169-486-971-806-440-951-189-567-672-779",
"651-931-990-154-822-490-444-740-187-958",
"307-300-280-696-147-938-316-132-748-992",
"223-973-404-830-802-319-726-692-919-321",
"637-277-454-792-861-929-604-191-677-392",
"463-767-379-150-805-336-160-980-372-325",
"141-574-827-847-519-893-464-818-340-867",
"857-204-553-618-301-934-669-374-263-766",
"765-572-877-177-376-668-953-262-525-763",
"838-488-335-914-570-380-703-120-608-995",
"792-973-604-559-857-643-739-161-325-690",
"754-569-861-276-158-250-718-736-629-952",
"110-417-525-629-618-372-221-502-881-635",
"250-284-713-502-442-570-531-762-578-207",
"727-427-960-149-934-685-941-664-688-937",
"338-524-589-881-552-751-609-209-122-917",
"931-770-411-986-709-557-978-449-598-164",
"764-346-653-127-225-291-951-816-208-724",
"948-294-338-756-818-123-310-984-368-261",
"515-480-298-793-640-226-838-576-459-950",
"526-539-884-250-334-577-235-940-774-412",
"668-308-118-470-942-834-477-758-212-627",
"747-112-773-527-653-966-443-457-617-122",
"125-688-799-833-741-733-560-531-386-880",
"993-396-520-170-695-957-409-763-371-678",
"545-545-453-234-719-997-286-734-836-571",
"709-629-319-352-817-168-493-276-702-120",
"565-389-561-610-766-685-786-893-821-874",
"916-617-590-912-813-566-253-262-162-269",
"917-250-201-316-956-561-408-847-187-826",
"243-110-182-692-939-911-520-817-205-569",
"169-362-427-717-260-735-794-500-304-206",
"766-272-442-727-988-687-145-907-739-804",
"476-462-986-100-842-985-875-193-590-992",
"917-315-412-461-158-271-191-648-903-806",
"912-139-558-670-562-889-379-970-694-305",
"705-778-417-445-970-996-225-519-611-162",
"825-331-464-162-499-978-728-855-984-715",
"238-700-612-404-388-770-189-356-759-981",
"257-758-966-680-476-124-593-753-396-824",
"940-701-549-990-974-586-175-125-362-998",
"741-219-567-241-303-362-731-419-385-128",
"825-790-203-487-403-257-573-829-651-273",
"236-342-269-138-660-728-667-767-881-425",
"825-990-607-625-848-454-629-348-598-513",
"131-886-344-745-658-851-537-294-874-985",
"437-222-283-424-468-629-136-374-580-463",
"944-912-541-763-753-625-348-249-895-416",
"475-983-870-741-853-612-666-579-239-367",
"708-238-706-708-188-794-351-361-552-353",
"849-534-435-249-493-506-357-343-603-868",
"245-729-603-765-257-457-577-121-479-981",
"705-944-874-705-179-460-881-364-206-289",
"778-130-765-601-101-553-889-185-139-807",
"446-328-703-445-350-951-942-529-146-343",
"160-782-703-738-998-359-381-858-838-510",
"739-226-135-963-432-765-232-549-551-781",
"123-203-303-307-621-730-290-970-243-574",
"336-856-770-923-602-313-829-840-875-990",
"984-217-422-192-453-513-654-781-769-986",
"830-675-254-233-416-227-546-374-810-605",
"886-874-272-545-619-374-312-240-352-163",
"219-994-530-411-195-796-261-502-369-774",
"223-381-421-104-762-261-450-465-788-468",
];

const limiter = rateLimit({
    windowMs: 10 * 1000, 
    max: 5, 
    message: { message: "Too many requests, please try again later." }
});
 
function generatePassword() {
    const getRandomNumber = () => Math.floor(Math.random() * 900) + 100; 
    const groups = [];
    for (let i = 0; i < 10; i++) {
        groups.push(getRandomNumber());
    }
    return groups.join('-'); 
}
for(let i = 0; i < 100; i++) {
    // console.log(`"${generatePassword()}",`);
}
const key = 123;  
const inputString = "cv34DSAadssagf6avcbsa";

const { encodedString, shiftValue } = encode(inputString, key);
// console.log("Encoded string:", encodedString);

// const decodedString = decode(encodedString, key, shiftValue);
// console.log("Decoded string:", decodedString); 



app.use(cors());
app.use(express.json());
app.use(limiter); 

app.post("/get-password", (req, res) => {
    const { passwordCheck } = req.body;

    if (!passwordCheck) {
        return;
    }

    if (!VALID_PASSWORDS.includes(passwordCheck)) {
        return;
    }

    res.json({ password: encode(inputString, key).encodedString });
});

app.listen(PORT, () => {
    console.log(`Server is running on http://localhost:${PORT}`);
});



// Function to encode the string
function encode(inputString, key) {
    const shiftValue = 54
    console.log("Shift value used for encoding:", shiftValue);

    let encodedString = '';
    for (let i = 0; i < inputString.length; i++) {
        let charCode = inputString.charCodeAt(i);
        // Shift the character by a random value between 1 and 10
        let shiftedCharCode = (charCode + shiftValue) % 256;
        // XOR the shifted character with the key for added complexity
        let encodedCharCode = shiftedCharCode ^ key;
        encodedString += String.fromCharCode(encodedCharCode);
    }

    return { encodedString, shiftValue };
}

// Function to decode the string
function decode(encodedString, key, shiftValue) {
    let decodedString = '';
    for (let i = 0; i < encodedString.length; i++) {
        let encodedCharCode = encodedString.charCodeAt(i);
        // XOR the character with the key to reverse the encoding step
        let shiftedCharCode = encodedCharCode ^ key;
        // Reverse the shift by subtracting the shift value
        let originalCharCode = (shiftedCharCode - shiftValue + 256) % 256;
        decodedString += String.fromCharCode(originalCharCode);
    }

    return decodedString;
}
